eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/accounting.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/accounting.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/accounting.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/accounting.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-column.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/format-column.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/format-column.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-column.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-money.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/format-money.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/format-money.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-money.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-number.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/format-number.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/format-number.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format-number.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/format.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/format.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/format.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/parse.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/parse.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/parse.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/parse.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/settings.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/settings.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/settings.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/settings.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/to-fixed.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/to-fixed.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/to-fixed.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/to-fixed.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/unformat.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/unformat.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/unformat.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/unformat.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/utils.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/utils.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/utils.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/utils.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/Ember CLI QUnit/version.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - Ember CLI QUnit\');\n    test(\'Ember CLI QUnit/version.js should pass jshint\', function() { \n      ok(true, \'Ember CLI QUnit/version.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/Ember CLI QUnit/version.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/config/environment\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"dummy\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=dummy/config/environment.js");

;eval("define(\"dummy/config/environments/development\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"dummy\",\"environment\":\"development\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true}};\n  });//# sourceURL=dummy/config/environments/development.js");

;eval("define(\"dummy/config/environments/test\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\"modulePrefix\":\"dummy\",\"environment\":\"test\",\"baseURL\":\"/\",\"locationType\":\"auto\",\"EmberENV\":{\"FEATURES\":{}},\"APP\":{\"LOG_ACTIVE_GENERATION\":false,\"LOG_VIEW_LOOKUPS\":false,\"rootElement\":\"#ember-testing\"}};\n  });//# sourceURL=dummy/config/environments/test.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/accounting.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/accounting.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/accounting.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/accounting.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/format-column.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/format-column.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/format-column.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/format-column.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/format-money.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/format-money.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/format-money.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/format-money.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/format-number.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/format-number.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/format-number.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/format-number.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/format.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/format.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/format.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/parse.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/parse.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/parse.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/parse.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/settings.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/settings.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/settings.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/settings.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/to-fixed.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/to-fixed.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/to-fixed.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/to-fixed.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/unformat.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/unformat.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/unformat.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/unformat.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/utils.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/utils.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/utils.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/utils.jshint.js");

;eval("define(\"dummy/ember-cli-accounting/tests/ember-cli-accounting/version.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-accounting\');\n    test(\'ember-cli-accounting/version.js should pass jshint\', function() { \n      ok(true, \'ember-cli-accounting/version.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-accounting/tests/ember-cli-accounting/version.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/accounting.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/accounting.js should pass jshint\', function() { \n      ok(true, \'ember-data/accounting.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/accounting.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/format-column.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/format-column.js should pass jshint\', function() { \n      ok(true, \'ember-data/format-column.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/format-column.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/format-money.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/format-money.js should pass jshint\', function() { \n      ok(true, \'ember-data/format-money.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/format-money.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/format-number.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/format-number.js should pass jshint\', function() { \n      ok(true, \'ember-data/format-number.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/format-number.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/format.js should pass jshint\', function() { \n      ok(true, \'ember-data/format.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/format.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/parse.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/parse.js should pass jshint\', function() { \n      ok(true, \'ember-data/parse.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/parse.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/settings.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/settings.js should pass jshint\', function() { \n      ok(true, \'ember-data/settings.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/settings.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/to-fixed.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/to-fixed.js should pass jshint\', function() { \n      ok(true, \'ember-data/to-fixed.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/to-fixed.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/unformat.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/unformat.js should pass jshint\', function() { \n      ok(true, \'ember-data/unformat.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/unformat.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/utils.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/utils.js should pass jshint\', function() { \n      ok(true, \'ember-data/utils.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/utils.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/version.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/version.js should pass jshint\', function() { \n      ok(true, \'ember-data/version.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/version.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/accounting.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/accounting.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/accounting.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/accounting.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/format-column.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/format-column.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/format-column.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/format-column.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/format-money.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/format-money.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/format-money.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/format-money.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/format-number.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/format-number.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/format-number.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/format-number.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/format.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/format.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/format.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/format.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/parse.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/parse.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/parse.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/parse.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/settings.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/settings.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/settings.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/settings.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/to-fixed.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/to-fixed.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/to-fixed.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/to-fixed.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/unformat.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/unformat.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/unformat.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/unformat.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/utils.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/utils.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/utils.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/utils.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/version.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/version.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/version.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/version.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<h2 id=\'title\'>Welcome to Ember.js</h2>\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/format-column-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/format-column-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/format-column-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/format-column-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/format-money-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/format-money-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/format-money-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/format-money-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/format-number-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/format-number-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/format-number-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/format-number-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/format-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/format-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/format-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/format-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/parse-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/parse-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/parse-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/parse-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/settings-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/settings-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/settings-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/settings-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/to-fixed-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/to-fixed-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/to-fixed-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/to-fixed-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/unformat-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/unformat-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/unformat-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/unformat-test.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environments/test\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    if (QUnit.urlParams.nocontainer) {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'hidden\';\n    } else {\n      document.getElementById(\'ember-testing-container\').style.visibility = \'visible\';\n    }\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/format-column-test\", \n  [\"ember-cli-accounting/format-column\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var formatColumn = __dependency1__[\"default\"];\n\n    module(\"formatColumn\");\n\n    test(\"formatColumn()\", function() {\n      // standard usage:\n      var list = [123, 12345];\n      equal(formatColumn(list, \"$ \", 0).toString(), ([\"$    123\", \"$ 12,345\"]).toString(), \"formatColumn works as expected\");\n\n\n      // multi-dimensional array (formatColumn should be applied recursively):\n      var list2 = [[1, 100], [900, 9]];\n      equal(formatColumn(list2).toString(), ([[\"$  1.00\", \"$100.00\"], [\"$900.00\", \"$  9.00\"]]).toString(), \"formatcolumn works on multi-dimensional array\");\n\n\n      // random numbers, must come back same length:\n      var column = formatColumn([Math.random(), Math.random() * 1000, Math.random() * 10000000]);\n      ok((column[0].length === column[2].length && column[1].length === column[2].length), \"formatColumn() with 3 random numbers returned strings of matching length\");\n\n\n      // random numbers, must come back same length:\n      var column2 = formatColumn([Math.random(), Math.random() * 1000, Math.random() * 10000000], {\n        format: \'(%v] --++== %s\',\n        thousand: \')(\',\n        decimal: \')[\',\n        precision: 3\n      });\n      ok((column2[0].length === column2[2].length && column2[1].length === column2[2].length), \"formatColumn() with 3 random numbers returned strings of matching length, even with a weird custom `format` parameter\");\n\n    });\n  });//# sourceURL=dummy/tests/unit/format-column-test.js");

;eval("define(\"dummy/tests/unit/format-money-test\", \n  [\"ember-cli-accounting/format-money\",\"ember-cli-accounting/settings\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var formatMoney = __dependency1__[\"default\"];\n    var currency = __dependency2__.currency;\n\n    module(\"formatMoney\");\n\n    test(\"formatMoney()\", function() {\n      equal(formatMoney(12345678), \"$12,345,678.00\", \"Default usage with default parameters is ok\");\n      equal(formatMoney(4999.99, \"$ \", 2, \".\", \",\"), \"$ 4.999,99\", \'custom formatting via straight params works ok\');\n      equal(formatMoney(-500000, \"£ \", 0), \"£ -500,000\", \'negative values, custom params, works ok\');\n      equal(formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }), \"5,318,008.00 GBP\", \"`format` parameter is observed in string output\");\n      equal(formatMoney(1000, { format: \"test %v 123 %s test\" }), \"test 1,000.00 123 $ test\", \"`format` parameter is observed in string output, despite being rather strange\");\n\n      // Format param is an object:\n      var format = {\n        pos: \"%s %v\",\n        neg: \"%s (%v)\",\n        zero:\"%s  --\"\n      };\n      equal(formatMoney(0, { symbol: \"GBP\",  format:format}), \"GBP  --\", \"`format` parameter provided given as an object with `zero` format, correctly observed in string output\");\n      equal(formatMoney(-1000, { symbol: \"GBP\",  format:format}), \"GBP (1,000.00)\", \"`format` parameter provided given as an object with `neg` format, correctly observed in string output\");\n      equal(formatMoney(1000, { symbol: \"GBP\",  format:{neg:\"--%v %s\"}}), \"GBP1,000.00\", \"`format` parameter provided, but only `neg` value provided - positive value should be formatted by default format (%s%v)\");\n\n      currency.format = \"%s%v\";\n      formatMoney(0, {format:\"\"});\n      equal(typeof currency.format, \"object\", \"`currency.format` default string value should be reformatted to an object, the first time it is used\");\n    });\n  });//# sourceURL=dummy/tests/unit/format-money-test.js");

;eval("define(\"dummy/tests/unit/format-number-test\", \n  [\"ember-cli-accounting/format-number\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var formatNumber = __dependency1__[\"default\"];\n\n    module(\"formatNumber\");\n\n    test(\"formatNumber()\", function() {\n      // Check custom precision and separators:\n      equal(formatNumber(4999.99, 2, \".\", \",\"), \"4.999,99\", \'Custom precision and decimal/thousand separators are a-ok\');\n\n      // check usage with options object parameter:\n      equal(formatNumber(5318008, {\n        precision : 3,\n        thousand : \"__\",\n        decimal : \"--\"\n      }), \"5__318__008--000\", \'Correctly handles custom precision and separators passed in via second param options object\');\n\n\n      // check rounding:\n      equal(formatNumber(0.615, 2), \"0.62\", \'Rounds 0.615 up to \"0.62\" with precision of 2\');\n\n      // manually and recursively formatted arrays should have same values:\n      var numbers = [8008135, [1234, 5678], 1000];\n      var formattedManually = [formatNumber(8008135), [formatNumber(1234), formatNumber(5678)], formatNumber(1000)];\n      var formattedRecursively = formatNumber(numbers);\n      equal(formattedRecursively.toString(), formattedManually.toString(), \'can recursively format multi-dimensional arrays\');\n    });\n  });//# sourceURL=dummy/tests/unit/format-number-test.js");

;eval("define(\"dummy/tests/unit/format-test\", \n  [\"ember-cli-accounting/format-number\",\"ember-cli-accounting/format\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var formatNumber = __dependency1__[\"default\"];\n    var format = __dependency2__[\"default\"];\n\n    module(\"format\");\n\n    test(\"format is an alias of formatNumber\", function() {\n      equal(formatNumber, format, \"formatNumber and format are equivalent\");\n    });\n  });//# sourceURL=dummy/tests/unit/format-test.js");

;eval("define(\"dummy/tests/unit/parse-test\", \n  [\"ember-cli-accounting/parse\",\"ember-cli-accounting/unformat\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var parse = __dependency1__[\"default\"];\n    var unformat = __dependency2__[\"default\"];\n\n    module(\"parse\");\n\n    test(\"parse is an alias of unformat\", function() {\n      equal(parse, unformat, \"parse and unformat are equivalent\");\n    });\n  });//# sourceURL=dummy/tests/unit/parse-test.js");

;eval("define(\"dummy/tests/unit/settings-test\", \n  [\"ember-cli-accounting/settings\",\"ember-cli-accounting/format-money\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var currency = __dependency1__.currency;\n    var formatMoney = __dependency2__[\"default\"];\n\n    var symbol, format;\n\n    module(\"settings\", {\n      setup: function(){\n        symbol = currency.symbol;\n        format = currency.format;\n        currency.symbol = \"€\";\n        currency.format = \"%v%s\";\n      },\n      teardown: function(){\n        currency.symbol = symbol;\n        currency.format = format;\n      }\n    });\n\n    test(\"settings can be changed\", function() {\n      equal(formatMoney(123), \"123.00€\", \'Default settings have been changed\');\n    });\n  });//# sourceURL=dummy/tests/unit/settings-test.js");

;eval("define(\"dummy/tests/unit/to-fixed-test\", \n  [\"ember-cli-accounting/to-fixed\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var toFixed = __dependency1__[\"default\"];\n\n    module(\"toFixed\");\n\n    test(\"toFixed()\", function() {\n      equal(toFixed(54321, 5), \"54321.00000\", \'Performs basic float zero-padding\');\n      equal(toFixed(0.615, 2), \"0.62\", \'Rounds 0.615 to \"0.62\" instead of \"0.61\"\');\n    });\n  });//# sourceURL=dummy/tests/unit/to-fixed-test.js");

;eval("define(\"dummy/tests/unit/unformat-test\", \n  [\"ember-cli-accounting/unformat\",\"ember-cli-accounting/settings\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var unformat = __dependency1__[\"default\"];\n    var number = __dependency2__.number;\n\n    module(\"unformat\");\n\n    test(\"unformat()\", function() {\n    	equal(unformat(\"$12,345,678.90 USD\"), 12345678.9, \'Can unformat currency to float\');\n    	equal(unformat(1234567890), 1234567890, \'Returns same value when passed an integer\');\n    	equal(unformat(\"string\"), 0, \'Returns 0 for a string with no numbers\');\n    	equal(unformat({joss:1}), 0, \'Returns 0 for object\');\n\n    	number.decimal = \',\';\n    	equal(unformat(\"100,00\"), 100, \'Uses decimal separator from settings\');\n    	equal(unformat(\"¤1.000,00\"), 1000, \'Uses decimal separator from settings\');\n    	number.decimal = \'.\';\n    });\n  });//# sourceURL=dummy/tests/unit/unformat-test.js");
